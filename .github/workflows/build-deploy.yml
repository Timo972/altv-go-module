name: Build & deploy
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'dev/*.*-dev*'
      - 'rc/*.*-rc*'
      - 'release/*.*'

jobs:
  build-windows:
    name: Build windows release
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}
      - name: Build
        shell: cmd
        run: |
          mkdir build
          pushd build
          cmake -G"Visual Studio 16" -A x64 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          popd
          mkdir dist\modules\go-module
          copy bin\Release\go-module.dll dist\modules\go-module
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - uses: actions/upload-artifact@v2
        with:
          name: go-module-windows
          path: ./dist/

  build-linux:
    name: Build linux release
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}
      - name: Build
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install gcc-8 g++-8
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++-8 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          cd ..
          mkdir -p dist/modules/go-module
          cp ./bin/libgo-module.so dist/modules/go-module
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - uses: actions/upload-artifact@v2
        with:
          name: go-module-linux
          path: ./dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-18.04
    needs: [build-linux, build-windows]
    steps:
      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: go-module-windows
          path: dist-windows

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: go-module-linux
          path: dist-linux

      #- name: Zip artifacts
      #  run: |
      #    zip -r -j go-module-windows dist-windows
      #    zip -r -j go-module-linux dist-linux

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}

      - name: Upload windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-windows/go-module.dll
          asset_name: go-module.dll
          asset_content_type: application/x-msdownload

      - name: Upload linux artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-linux/libgo-module.so
          asset_name: libgo-module.so
          asset_content_type: application/octet-stream

  delete-artifacts:
    name: Delete artifacts
    runs-on: ubuntu-18.04
    needs: [ create-release ]
    if: ${{ always() }}
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            go-module-linux
            go-module-windows